{"version":3,"sources":["components/styled.tsx","pages/my/landing-page/index.tsx","components/daterange-select/index.tsx","components/tabs/index.tsx","components/common/account/transactions.tsx","components/common/account/downlines.tsx","components/common/account/accountmodel.tsx","components/common/account/view.tsx","pages/my/account/view.tsx","pages/my/account/index.tsx"],"names":["StyledBadge","withStyles","theme","createStyles","badge","right","top","border","palette","background","paper","padding","backgroundColor","color","Badge","ConfirmedBadge","StyledViewPage","props","classes","makeStyles","root","flexGrow","spacing","text","secondary","minHeight","position","useViewPageStyles","className","children","StyledViewField","height","maxWidth","fontSize","borderBottom","InlineList","align","wrap","textAlign","whiteSpace","margin","paddingInlineStart","listStyle","display","verticalAlign","useStyles","InlineListItem","width","useClickableStyle","cursor","LandingMenu","g","useGlobal","go","useNavigation","onClick","HasGPCAccount","Landing","DateRangeElement","onChange","period","useState","open","setOpen","toggle","initialDateRange","closeOnClickOutside","range","Period","startDate","endDate","DateRangeSelectDialog","title","onSelectionConfirmed","nc","useContext","NotificationContext","newPeriod","setNewPeriod","handleClose","onClose","disableBackdropClick","disableEscapeKeyDown","style","value","variant","errors","ret","IsValid","push","validate","length","snackbar","show","DateRangeSelectWidget","clickable","p","setP","disp","setDisp","useEffect","s","FPeriod","updateDisp","disabled","label","TabPanel","index","other","role","hidden","id","Box","NTabs","tabHeaders","tabs","setValue","AppBar","Tabs","event","map","x","Tab","i","view","float","Transactions","data","useRequest","setView","rows","setRows","cols","setCols","columns","field","headerName","valueGetter","params","FDate","row","order","docDate","orNo","description","headerAlign","valueFormatter","FDouble","Number","amount","columnsItemized","renderCell","Tooltip","stock","stockName","type","transactions","lst","forEach","items","FormControl","FormControlLabel","control","Checkbox","checked","pointValue","FCurrency","hideFooterPagination","autoHeight","accountName","figures","totalFigures","AccountItem","onSelect","breakAways","isBreakAway","undefined","find","account","accountNo","profile","name","rank","downlines","Downlines","dlPointValue","dlAmount","summary","AccountModelWidget","onSelectAccount","req","setPeriod","setData","getAccountModel","a","get","process","toISOString","res","success","FormLabel","psc","gsc","lsc","totalCommissions","View","ps","PageStateContext","openData","Get","dispatch","Grid","container","item","sm","fontWeight","upline","uplineAccountNo","Divider","JSON","stringify","GPCAccount","Account","pageMode","setPageMode","openProps","setOpenProps","Add","key"],"mappings":"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","file":"static/js/23.4174d2f2.chunk.js","sourcesContent":["import {\r\n\tBadge,\r\n\tcreateStyles,\r\n\tmakeStyles,\r\n\tPaper,\r\n\tTheme,\r\n\twithStyles,\r\n} from \"@material-ui/core\";\r\nimport { Label } from \"@material-ui/icons\";\r\nimport { FC } from \"react\";\r\nimport { classicNameResolver } from \"typescript\";\r\n\r\nexport const StyledBadge = withStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tbadge: {\r\n\t\t\tright: -3,\r\n\t\t\ttop: 13,\r\n\t\t\tborder: `2px solid ${theme.palette.background.paper}`,\r\n\t\t\tpadding: \"0 4px\",\r\n\t\t\tbackgroundColor: \"gray\",\r\n\t\t\tcolor: \"white\",\r\n\t\t},\r\n\t})\r\n)(Badge);\r\n\r\nexport const ConfirmedBadge = withStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tbadge: {\r\n\t\t\tright: -3,\r\n\t\t\ttop: 13,\r\n\t\t\tborder: `2px solid ${theme.palette.background.paper}`,\r\n\t\t\tpadding: \"0 4px\",\r\n\t\t\tbackgroundColor: \"green\",\r\n\t\t\tcolor: \"white\",\r\n\t\t},\r\n\t})\r\n)(Badge);\r\n\r\nexport const StyledViewPage: FC = (props) => {\r\n\tconst useViewPageStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\tflexGrow: 1,\r\n\t\t\t},\r\n\t\t\tpaper: {\r\n\t\t\t\tpadding: theme.spacing(2),\r\n\t\t\t\tcolor: theme.palette.text.secondary,\r\n\t\t\t\tminHeight: 400,\r\n\t\t\t\tposition: \"relative\",\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\tconst classes = useViewPageStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Paper className={classes.paper}>{props.children}</Paper>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\ninterface IStyledViewFieldProps {\r\n\theight?: number;\r\n\tmaxWidth?: number;\r\n}\r\n\r\nexport const StyledViewField: FC<IStyledViewFieldProps> = ({\r\n\theight,\r\n\tmaxWidth,\r\n\tchildren,\r\n}) => {\r\n\tconst useViewPageStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\tfontSize: 16,\r\n\t\t\t\tpadding: \"0 2px\",\r\n\t\t\t\tborderBottom: \"2px dotted #e0e0e0\",\r\n\t\t\t\theight: height ?? \"initial\",\r\n\t\t\t\tmaxWidth: maxWidth ?? 300,\r\n\t\t\t\tminHeight: 20,\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\tconst classes = useViewPageStyles();\r\n\r\n\treturn <div className={classes.root}>{children}</div>;\r\n};\r\n\r\ninterface IInlineListProps {\r\n\talign?: \"left\" | \"center\" | \"right\";\r\n\twrap?: boolean;\r\n\tclassName?: string;\r\n}\r\n\r\nexport const InlineList: FC<IInlineListProps> = ({\r\n\talign,\r\n\twrap,\r\n\tclassName,\r\n\tchildren,\r\n}) => {\r\n\tconst useStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\ttextAlign: align,\r\n\t\t\t\twhiteSpace: wrap ? \"initial\" : \"nowrap\",\r\n\t\t\t\t\"& > ul\": {\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tpaddingInlineStart: 0,\r\n\t\t\t\t},\r\n\t\t\t\t\"& ul ul\": {\r\n\t\t\t\t\tpadding: \"20px\",\r\n\t\t\t\t},\r\n\t\t\t\t\"& li\": {\r\n\t\t\t\t\tlistStyle: \"none\",\r\n\t\t\t\t\tdisplay: \"inline-block\",\r\n\t\t\t\t\tverticalAlign: \"top\",\r\n\t\t\t\t\tmargin:\r\n\t\t\t\t\t\talign == \"left\"\r\n\t\t\t\t\t\t\t? \"0 10px 0 0\"\r\n\t\t\t\t\t\t\t: align == \"center\"\r\n\t\t\t\t\t\t\t? \"0 5px 0 5px\"\r\n\t\t\t\t\t\t\t: \"0 0 0 10px\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={`${classes.root} ${className ?? \"\"}`}>\r\n\t\t\t<ul>{children}</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\ninterface IInlineListItemProps {\r\n\talign?: \"left\" | \"center\" | \"right\";\r\n\twidth?: number;\r\n}\r\nexport const InlineListItem: FC<IInlineListItemProps> = ({\r\n\talign,\r\n\twidth,\r\n\tchildren,\r\n}) => {\r\n\tconst useStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\ttextAlign: align ?? \"left\",\r\n\t\t\t\twidth: width ? `${width}px` : \"initial\",\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\tconst classes = useStyles();\r\n\r\n\treturn <li className={classes.root}>{children}</li>;\r\n};\r\n\r\nexport const useClickableStyle = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\troot: {\r\n\t\t\t\"&, & *\": {\r\n\t\t\t\tcursor: \"pointer !important\",\r\n\t\t\t\tcolor: \"black !important\",\r\n\t\t\t},\r\n\t\t\t\"&:hover *\": {\r\n\t\t\t\tcolor: \"blue !important\",\r\n\t\t\t},\r\n\t\t},\r\n\t})\r\n);\r\n","import { Button } from \"@material-ui/core\";\r\nimport { FC } from \"react\";\r\nimport \"../../../style.scss\";\r\nimport { useGlobal, useNavigation } from \"../../../lib/hooks\";\r\n\r\nexport const LandingMenu: FC = () => {\r\n\tconst g = useGlobal();\r\n\tconst { go } = useNavigation();\r\n\r\n\treturn (\r\n\t\t<div className=\"landing-page-menu\">\r\n\t\t\t<Button onClick={() => go(\"my-profile\")}>Profile</Button>\r\n\t\t\t<Button onClick={() => go(\"my-uplineclaim\")}>Upline Claim</Button>\r\n\t\t\t&nbsp;|&nbsp;\r\n\t\t\t<Button onClick={() => go(\"my-account-requests\")}>\r\n\t\t\t\tAccount Requests\r\n\t\t\t</Button>\r\n\t\t\t{g.HasGPCAccount && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t&nbsp;|&nbsp;\r\n\t\t\t\t\t<Button onClick={() => go(\"my-account\")}>Account</Button>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst Landing: FC = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>My</h3>\r\n\r\n\t\t\t<p>Please select where you want to go</p>\r\n\t\t\t<LandingMenu />\r\n\t\t\t<hr />\r\n\t\t\t<br />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Landing;\r\n","import { FC, useContext, useEffect, useState } from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { FPeriod, Period } from \"../../lib/common\";\r\nimport {\r\n\tButton,\r\n\tDialog,\r\n\tDialogActions,\r\n\tDialogContent,\r\n\tDialogTitle,\r\n\tTextField,\r\n} from \"@material-ui/core\";\r\nimport { StyledViewField, useClickableStyle } from \"../styled\";\r\nimport { NotificationContext } from \"../../lib/notifications\";\r\nimport { DateRange, DateRangePicker } from \"materialui-daterange-picker\";\r\n\r\ninterface IDateRangeProps {\r\n\tonChange: (value: Period) => void;\r\n\tperiod: Period;\r\n}\r\n\r\nconst DateRangeElement: FC<IDateRangeProps> = ({ onChange, period }) => {\r\n\tconst [open, setOpen] = useState(true);\r\n\tconst toggle = () => setOpen(!open);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<DateRangePicker\r\n\t\t\t\topen={open}\r\n\t\t\t\ttoggle={toggle}\r\n\t\t\t\tinitialDateRange={period}\r\n\t\t\t\tcloseOnClickOutside={false}\r\n\t\t\t\tonChange={(range) => {\r\n\t\t\t\t\tonChange(new Period(range.startDate, range.endDate));\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\ninterface IDateRangeSelectDialogProps extends IDateRangeWidgetWidgetProps {\r\n\topen: boolean;\r\n\tsetOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport const DateRangeSelectDialog: FC<IDateRangeSelectDialogProps> = ({\r\n\ttitle,\r\n\tperiod,\r\n\tonSelectionConfirmed,\r\n\topen,\r\n\tsetOpen,\r\n}) => {\r\n\tconst nc = useContext(NotificationContext);\r\n\r\n\tconst [newPeriod, setNewPeriod] = useState<Period | null>(null);\r\n\tconst handleClose = () => setOpen(false);\r\n\r\n\tconst validate = () => {\r\n\t\tlet ret: string[] = [];\r\n\r\n\t\tif (!newPeriod?.IsValid) ret.push(\"Invalid period\");\r\n\r\n\t\treturn ret;\r\n\t};\r\n\r\n\tconst handleApply = () => {\r\n\t\tconst errors = validate();\r\n\t\tif (errors.length > 0) {\r\n\t\t\tnc.snackbar.show(errors, \"warning\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tnewPeriod && onSelectionConfirmed(newPeriod);\r\n\t\tsetOpen(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Dialog\r\n\t\t\t\tonClose={handleClose}\r\n\t\t\t\topen={open}\r\n\t\t\t\tdisableBackdropClick\r\n\t\t\t\tdisableEscapeKeyDown\r\n\t\t\t\tmaxWidth=\"lg\"\r\n\t\t\t>\r\n\t\t\t\t<DialogTitle>{`${title}`}</DialogTitle>\r\n\t\t\t\t<DialogContent>\r\n\t\t\t\t\t<div style={{ width: \"720px\" }}>\r\n\t\t\t\t\t\t<DateRangeElement\r\n\t\t\t\t\t\t\tperiod={period}\r\n\t\t\t\t\t\t\tonChange={(value) => setNewPeriod(value)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</DialogContent>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button onClick={handleClose} variant=\"contained\" color=\"default\">\r\n\t\t\t\t\t\tCancel\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button onClick={handleApply} variant=\"contained\" color=\"primary\">\r\n\t\t\t\t\t\tOk\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\ninterface IDateRangeWidgetWidgetProps {\r\n\ttitle: string;\r\n\tperiod: Period;\r\n\tonSelectionConfirmed: (value: Period) => void;\r\n}\r\n\r\nexport const DateRangeSelectWidget: FC<IDateRangeWidgetWidgetProps> = ({\r\n\ttitle,\r\n\tperiod,\r\n\tonSelectionConfirmed,\r\n}) => {\r\n\tconst useStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\tdisplay: \"inline-block\",\r\n\t\t\t\tcursor: \"pointer\",\r\n\t\t\t\tpadding: \"8px\",\r\n\t\t\t\t\"& *\": {\r\n\t\t\t\t\tcursor: \"pointer !important\",\r\n\t\t\t\t\tcolor: \"black !important\",\r\n\t\t\t\t},\r\n\t\t\t\t\"&:hover\": {\r\n\t\t\t\t\tcolor: \"gray\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\r\n\tconst classes = useStyles();\r\n\tconst clickable = useClickableStyle();\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [p, setP] = useState<Period>(period);\r\n\tconst [disp, setDisp] = useState(\"\");\r\n\r\n\tconst handleClick = () => {\r\n\t\tsetOpen(true);\r\n\t};\r\n\r\n\tconst updateDisp = (value: Period) => {\r\n\t\tconst s = FPeriod(value.startDate, value.endDate);\r\n\t\tsetDisp(s);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateDisp(p);\r\n\t}, [p]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div onClick={handleClick}>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tclassName={`${classes.root} ${clickable.root}`}\r\n\t\t\t\t\tdisabled\r\n\t\t\t\t\tlabel={title}\r\n\t\t\t\t\tvalue={disp}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<DateRangeSelectDialog\r\n\t\t\t\ttitle={title}\r\n\t\t\t\tperiod={p}\r\n\t\t\t\tonSelectionConfirmed={(value) => {\r\n\t\t\t\t\tsetP(value);\r\n\t\t\t\t\tonSelectionConfirmed(value);\r\n\t\t\t\t}}\r\n\t\t\t\topen={open}\r\n\t\t\t\tsetOpen={setOpen}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { AppBar, makeStyles, Tab, Tabs, Theme } from \"@material-ui/core\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { FC, useState } from \"react\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\troot: {\r\n\t\tflexGrow: 1,\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t},\r\n}));\r\n\r\ninterface ITabPanelProps {\r\n\tchildren?: React.ReactNode;\r\n\tindex: any;\r\n\tvalue: any;\r\n}\r\n\r\nconst TabPanel: FC<ITabPanelProps> = ({ children, value, index, ...other }) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\trole=\"tabpanel\"\r\n\t\t\thidden={value !== index}\r\n\t\t\tid={`simple-tabpanel-${index}`}\r\n\t\t\taria-labelledby={`simple-tab-${index}`}\r\n\t\t\t{...other}\r\n\t\t>\r\n\t\t\t{value === index && <Box p={3}>{children}</Box>}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\ninterface ITabsProps {\r\n\ttabHeaders: string[];\r\n\ttabs: JSX.Element[];\r\n}\r\n\r\nconst NTabs: FC<ITabsProps> = ({ tabHeaders, tabs }) => {\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = useState(0);\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t<Tabs value={value} onChange={(event, value) => setValue(value)}>\r\n\t\t\t\t\t{tabHeaders.map((x) => (\r\n\t\t\t\t\t\t<Tab label={x} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Tabs>\r\n\t\t\t</AppBar>\r\n\t\t\t{tabs.map((x, i) => (\r\n\t\t\t\t<TabPanel value={value} index={i}>\r\n\t\t\t\t\t{x}\r\n\t\t\t\t</TabPanel>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default NTabs;\r\n","import {\r\n\tDataGrid,\r\n\tGridCellParams,\r\n\tGridColDef,\r\n\tGridPageChangeParams,\r\n\tGridRowData,\r\n\tGridValueFormatterParams,\r\n\tGridValueGetterParams,\r\n} from \"@material-ui/data-grid\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport {\r\n\tFCurrency,\r\n\tFDate,\r\n\tFDateCustom,\r\n\tFDouble,\r\n\tPeriod,\r\n} from \"../../../lib/common\";\r\nimport { useGlobal, useRequest } from \"../../../lib/hooks\";\r\nimport {\r\n\tAccountTransaction,\r\n\tAccountTransactionSet,\r\n} from \"../../../lib/models-account\";\r\nimport Loading from \"../../loading\";\r\nimport { InlineList } from \"../../styled\";\r\nimport {\r\n\tCheckbox,\r\n\tFormControl,\r\n\tFormControlLabel,\r\n\tFormLabel,\r\n\tmakeStyles,\r\n\tTooltip,\r\n} from \"@material-ui/core\";\r\nimport { AccountOrder, AccountOrderItem } from \"../../../lib/models-inventory\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tview: {\r\n\t\tfloat: \"left\",\r\n\t},\r\n}));\r\n\r\ntype TransactionListViewType = \"per order\" | \"per item\";\r\n\r\ninterface IProps {\r\n\tdata: AccountTransactionSet;\r\n}\r\n\r\nconst Transactions: FC<IProps> = ({ data }) => {\r\n\tconst classes = useStyles();\r\n\r\n\tconst req = useRequest();\r\n\r\n\tconst [view, setView] = useState<TransactionListViewType>(\"per order\");\r\n\r\n\tconst [rows, setRows] = useState<GridRowData[]>([]);\r\n\tconst [cols, setCols] = useState<GridColDef[]>([]);\r\n\r\n\tconst columns: GridColDef[] = [\r\n\t\t{ field: \"id\", headerName: \"Id\", width: 90 },\r\n\t\t{\r\n\t\t\tfield: \"date\",\r\n\t\t\theaderName: \"Date\",\r\n\t\t\twidth: 110,\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\tFDate((params.row as AccountTransaction).order.docDate),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"orNo\",\r\n\t\t\theaderName: \"OR No.\",\r\n\t\t\twidth: 150,\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\t(params.row as AccountTransaction).order.orNo,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"description\",\r\n\t\t\theaderName: \"Description\",\r\n\t\t\twidth: 250,\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\t(params.row as AccountTransaction).order.description,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"pointValue\",\r\n\t\t\theaderName: \"PV\",\r\n\t\t\twidth: 100,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\tvalueFormatter: (params: GridValueFormatterParams) =>\r\n\t\t\t\tFDouble(Number(params.value), 0),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"amount\",\r\n\t\t\theaderName: \"Amount (₱)\",\r\n\t\t\twidth: 150,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\tFDouble(Number((params.row as AccountTransaction).amount)),\r\n\t\t},\r\n\t];\r\n\r\n\tconst columnsItemized: GridColDef[] = [\r\n\t\t{ field: \"id\", headerName: \"Id\", width: 90 },\r\n\t\t{\r\n\t\t\tfield: \"docDate\",\r\n\t\t\theaderName: \"Date\",\r\n\t\t\twidth: 110,\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\tFDate(params.value as Date),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"orNo\",\r\n\t\t\theaderName: \"OR No.\",\r\n\t\t\twidth: 150,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"stockName\",\r\n\t\t\theaderName: \"Stock Name\",\r\n\t\t\twidth: 300,\r\n\t\t\trenderCell: (params: GridCellParams) => (\r\n\t\t\t\t<Tooltip title={params.row.stock?.description}>\r\n\t\t\t\t\t<div>{params.row.stock?.stockName}</div>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"qty\",\r\n\t\t\theaderName: \"Qty\",\r\n\t\t\twidth: 100,\r\n\t\t\theaderAlign: \"center\",\r\n\t\t\talign: \"center\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"price\",\r\n\t\t\theaderName: \"Price (₱)\",\r\n\t\t\twidth: 150,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\tFDouble(Number(params.value)),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"discount\",\r\n\t\t\theaderName: \"Discount (₱)\",\r\n\t\t\twidth: 160,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\tvalueFormatter: (params: GridValueFormatterParams) =>\r\n\t\t\t\tFDouble(Number(params.value)),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"totalPointValue\",\r\n\t\t\theaderName: \"PV\",\r\n\t\t\twidth: 100,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\ttype: \"number\",\r\n\t\t\tvalueFormatter: (params: GridValueFormatterParams) =>\r\n\t\t\t\tFDouble(Number(params.value), 0),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"amount\",\r\n\t\t\theaderName: \"Amount (₱)\",\r\n\t\t\twidth: 150,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\tFDouble(Number(params.value)),\r\n\t\t},\r\n\t];\r\n\r\n\tconst getItemized = (order: AccountOrder, items: AccountOrderItem[]) => {\r\n\t\treturn items.map((x) => {\r\n\t\t\treturn {\r\n\t\t\t\tdocDate: order.docDate,\r\n\t\t\t\torNo: order.orNo,\r\n\t\t\t\t...x,\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (view == \"per order\") {\r\n\t\t\tsetRows(data.transactions ?? []);\r\n\t\t\tsetCols(columns);\r\n\t\t} else {\r\n\t\t\tlet lst: GridRowData[] = [];\r\n\t\t\tdata?.transactions.forEach((x) => {\r\n\t\t\t\tlst = [...lst, ...getItemized(x.order, x.items)];\r\n\t\t\t});\r\n\r\n\t\t\tsetRows(lst);\r\n\t\t\tsetCols(columnsItemized);\r\n\t\t}\r\n\t}, [data, view]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{data ? (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className={classes.view}>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={view == \"per item\"}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(event, checked) =>\r\n\t\t\t\t\t\t\t\t\t\t\tsetView(checked ? \"per item\" : \"per order\")\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlabel=\"Itemized view\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<InlineList align=\"right\">\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<h3>{`PV: ${data.pointValue} | Orders: ${FCurrency(\r\n\t\t\t\t\t\t\t\tdata.amount\r\n\t\t\t\t\t\t\t)}`}</h3>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</InlineList>\r\n\t\t\t\t\t<DataGrid\r\n\t\t\t\t\t\trows={rows}\r\n\t\t\t\t\t\tcolumns={cols}\r\n\t\t\t\t\t\thideFooterPagination={true}\r\n\t\t\t\t\t\tautoHeight\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t) : (\r\n\t\t\t\t<Loading />\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Transactions;\r\n","import { Divider, makeStyles } from \"@material-ui/core\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { FDateCustom, FDouble, Period } from \"../../../lib/common\";\r\nimport { useRequest } from \"../../../lib/hooks\";\r\nimport { GPCAccount } from \"../../../lib/models\";\r\nimport { AccountModel } from \"../../../lib/models-account\";\r\nimport { InlineList, useClickableStyle } from \"../../styled\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tposition: \"relative\",\r\n\t\t\"& ul\": {\r\n\t\t\tmargin: 0,\r\n\t\t\tpadding: \"0 0 10px 20px\",\r\n\t\t},\r\n\t},\r\n\taccountName: {\r\n\t\tcursor: \"pointer\",\r\n\t\tborderBottom: \"1px dotted #e0e0e0\",\r\n\t},\r\n\tfigures: {\r\n\t\tposition: \"absolute\",\r\n\t\ttop: 0,\r\n\t\tright: 0,\r\n\t\t\"& li\": {\r\n\t\t\twidth: \"120px\",\r\n\t\t},\r\n\t},\r\n\ttotalFigures: {\r\n\t\t\"& li\": {\r\n\t\t\twidth: \"120px\",\r\n\t\t},\r\n\t},\r\n}));\r\n\r\ninterface IProps {\r\n\tdata: AccountModel;\r\n\tonSelect?: (account: GPCAccount) => void;\r\n\tbreakAways: string[];\r\n}\r\n\r\nconst AccountItem: FC<IProps> = ({ data, onSelect, breakAways }) => {\r\n\tconst classes = useStyles();\r\n\tconst clickable = useClickableStyle();\r\n\r\n\tconst isBreakAway =\r\n\t\tbreakAways.find((x) => x == data.account.accountNo) != undefined;\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<div\r\n\t\t\t\tclassName={`${classes.accountName} ${clickable.root}`}\r\n\t\t\t\tonClick={() => onSelect && onSelect(data.account)}\r\n\t\t\t>\r\n\t\t\t\t<b>{data.account.profile?.name}</b>\r\n\t\t\t\t&nbsp;\r\n\t\t\t\t<small>\r\n\t\t\t\t\t({`${data.account.accountNo}, ${data.account.rank.description}`})\r\n\t\t\t\t\t{isBreakAway && \" [Break-away]\"}\r\n\t\t\t\t</small>\r\n\t\t\t\t{!isBreakAway && (\r\n\t\t\t\t\t<div className={classes.figures}>\r\n\t\t\t\t\t\t<InlineList align=\"right\">\r\n\t\t\t\t\t\t\t<li>{FDouble(data.transactions.pointValue, 0)}</li>\r\n\t\t\t\t\t\t\t<li>{FDouble(data.transactions.amount)}</li>\r\n\t\t\t\t\t\t</InlineList>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t{!isBreakAway && (\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{data.downlines.map((x) => (\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<AccountItem\r\n\t\t\t\t\t\t\t\tdata={x}\r\n\t\t\t\t\t\t\t\tonSelect={onSelect}\r\n\t\t\t\t\t\t\t\tbreakAways={breakAways}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\ninterface IDownlinesProps {\r\n\tdata: AccountModel;\r\n\tonSelect?: (account: GPCAccount) => void;\r\n}\r\n\r\nconst Downlines: FC<IDownlinesProps> = ({ data, onSelect }) => {\r\n\tconst classes = useStyles();\r\n\tconst req = useRequest();\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{data && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<InlineList\r\n\t\t\t\t\t\talign=\"right\"\r\n\t\t\t\t\t\twrap={true}\r\n\t\t\t\t\t\tclassName={classes.totalFigures}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<b>PV</b>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<b>Orders (₱)</b>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</InlineList>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{data.downlines.map((x) => (\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t<AccountItem\r\n\t\t\t\t\t\t\t\t\tdata={x}\r\n\t\t\t\t\t\t\t\t\tonSelect={onSelect}\r\n\t\t\t\t\t\t\t\t\tbreakAways={data.breakAways}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<InlineList\r\n\t\t\t\t\t\talign=\"right\"\r\n\t\t\t\t\t\twrap={true}\r\n\t\t\t\t\t\tclassName={classes.totalFigures}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<b>Total</b>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<b>{FDouble(data.dlPointValue, 0)}</b>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<b>{FDouble(data.dlAmount)}</b>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</InlineList>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Downlines;\r\n","import { FC, useEffect, useState } from \"react\";\r\nimport { FCurrency, FDateCustom, Period } from \"../../../lib/common\";\r\nimport { DateRangeSelectWidget } from \"../../daterange-select\";\r\nimport NTabs from \"../../tabs\";\r\nimport { GPCAccount } from \"../../../lib/models\";\r\nimport Transactions from \"./transactions\";\r\nimport Downlines from \"./downlines\";\r\nimport {\r\n\tFormControl,\r\n\tFormControlLabel,\r\n\tFormLabel,\r\n\tmakeStyles,\r\n} from \"@material-ui/core\";\r\nimport { useRequest } from \"../../../lib/hooks\";\r\nimport { AccountModel } from \"../../../lib/models-account\";\r\nimport Loading from \"../../loading\";\r\nimport { InlineList } from \"../../styled\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tposition: \"relative\",\r\n\t},\r\n\tperiod: {\r\n\t\tfloat: \"left\",\r\n\t},\r\n\tsummary: {\r\n\t\tfloat: \"right\",\r\n\t},\r\n}));\r\n\r\ninterface IProps {\r\n\taccountNo: string;\r\n\tonSelectAccount: (account: GPCAccount) => void;\r\n}\r\n\r\nconst AccountModelWidget: FC<IProps> = ({ accountNo, onSelectAccount }) => {\r\n\tconst classes = useStyles();\r\n\tconst req = useRequest();\r\n\r\n\tconst [period, setPeriod] = useState<Period>(\r\n\t\tnew Period(undefined, undefined, \"month\")\r\n\t);\r\n\r\n\tconst [data, setData] = useState<AccountModel>();\r\n\r\n\tconst getAccountModel = async () => {\r\n\t\tconst res = await req.get(\r\n\t\t\t`${\r\n\t\t\t\tprocess.env.REACT_APP_API\r\n\t\t\t}/gpcaccount/model?accountNo=${accountNo}&startDate=${period.startDate.toISOString()}&endDate=${period.endDate.toISOString()}`\r\n\t\t);\r\n\t\tif (res.success) {\r\n\t\t\tsetData(res.data);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tgetAccountModel();\r\n\t}, [accountNo, period]);\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<div className={classes.period}>\r\n\t\t\t\t<DateRangeSelectWidget\r\n\t\t\t\t\ttitle=\"Select Period\"\r\n\t\t\t\t\tperiod={period}\r\n\t\t\t\t\tonSelectionConfirmed={(value) => setPeriod(value)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t{data ? (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className={classes.summary}>\r\n\t\t\t\t\t\t<InlineList>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t\t<FormLabel>PSC</FormLabel>\r\n\t\t\t\t\t\t\t\t\t<h3>{FCurrency(data.psc)}</h3>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t\t<FormLabel>GSC</FormLabel>\r\n\t\t\t\t\t\t\t\t\t<h3>{FCurrency(data.gsc)}</h3>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t\t<FormLabel>LSC</FormLabel>\r\n\t\t\t\t\t\t\t\t\t<h3>{FCurrency(data.lsc)}</h3>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t\t<FormLabel>Total Commissions</FormLabel>\r\n\t\t\t\t\t\t\t\t\t<h3>{FCurrency(data.totalCommissions)}</h3>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</InlineList>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<NTabs\r\n\t\t\t\t\t\ttabHeaders={[\"Transactions\", \"Downlines\"]}\r\n\t\t\t\t\t\ttabs={[\r\n\t\t\t\t\t\t\t<Transactions data={data.transactions} />,\r\n\t\t\t\t\t\t\t<Downlines\r\n\t\t\t\t\t\t\t\tdata={data}\r\n\t\t\t\t\t\t\t\tonSelect={(account) => onSelectAccount(account)}\r\n\t\t\t\t\t\t\t/>,\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t) : (\r\n\t\t\t\t<Loading />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AccountModelWidget;\r\n","import { Box, Divider, Grid } from \"@material-ui/core\";\r\nimport { FC, useContext } from \"react\";\r\nimport { GPCAccount } from \"../../../lib/models\";\r\nimport PageStateContext, { PageModeType } from \"../../../lib/pageStateContext\";\r\nimport {\r\n\tStyledViewField,\r\n\tStyledViewPage,\r\n\tuseClickableStyle,\r\n} from \"../../styled\";\r\nimport AccountModelWidget from \"./accountmodel\";\r\n\r\ninterface IProps {\r\n\tdata?: GPCAccount;\r\n}\r\n\r\nconst View: FC<IProps> = ({ data }) => {\r\n\tconst classes = useClickableStyle();\r\n\tconst ps = useContext(PageStateContext);\r\n\r\n\tconst open = (openData: GPCAccount) => {\r\n\t\t(\r\n\t\t\tps.Get(\"management-accounts-setOpenProps\")?.dispatch as React.Dispatch<\r\n\t\t\t\tReact.SetStateAction<object>\r\n\t\t\t>\r\n\t\t)({ data: openData });\r\n\r\n\t\t(\r\n\t\t\tps.Get(\"management-accounts-setPageMode\")?.dispatch as React.Dispatch<\r\n\t\t\t\tReact.SetStateAction<PageModeType>\r\n\t\t\t>\r\n\t\t)(\"view\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<StyledViewPage>\r\n\t\t\t\t{data ? (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t\t<Grid item sm={2}>\r\n\t\t\t\t\t\t\t\t<Box textAlign=\"right\" fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\tName:\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item sm={10}>\r\n\t\t\t\t\t\t\t\t<StyledViewField>{data.profile.name}</StyledViewField>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t\t<Grid item sm={2}>\r\n\t\t\t\t\t\t\t\t<Box textAlign=\"right\" fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\tAccount No.:\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item sm={10}>\r\n\t\t\t\t\t\t\t\t<StyledViewField>{data.accountNo}</StyledViewField>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t\t<Grid item sm={2}>\r\n\t\t\t\t\t\t\t\t<Box textAlign=\"right\" fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\tRank:\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item sm={10}>\r\n\t\t\t\t\t\t\t\t<StyledViewField>{data.rank.description}</StyledViewField>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t\t<Grid item sm={2}>\r\n\t\t\t\t\t\t\t\t<Box textAlign=\"right\" fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\tUpline:\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item sm={10}>\r\n\t\t\t\t\t\t\t\t{data.upline ? (\r\n\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.root}\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => data.upline && open(data.upline)}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<StyledViewField>\r\n\t\t\t\t\t\t\t\t\t\t\t{data.upline?.profile.name}\r\n\t\t\t\t\t\t\t\t\t\t</StyledViewField>\r\n\t\t\t\t\t\t\t\t\t\t<small>{data.uplineAccountNo}</small>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<StyledViewField>[No upline]</StyledViewField>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t<Divider />\r\n\t\t\t\t\t\t<AccountModelWidget\r\n\t\t\t\t\t\t\taccountNo={data.accountNo}\r\n\t\t\t\t\t\t\tonSelectAccount={(account) => open(account)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div>[No data]</div>\r\n\t\t\t\t)}\r\n\t\t\t</StyledViewPage>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default View;\r\n","import { FC } from \"react\";\r\nimport { GPCAccount } from \"../../../lib/models\";\r\nimport GPCAccountView from \"../../../components/common/account/view\";\r\n\r\ninterface IProps {\r\n\tdata?: GPCAccount;\r\n}\r\n\r\nconst View: FC<IProps> = ({ data }) => {\r\n\tif (data) {\r\n\t\tconst comp1 = JSON.stringify(data);\r\n\t\tconst comp2 = JSON.stringify(new GPCAccount());\r\n\r\n\t\tif (comp1 == comp2) {\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<h3>\r\n\t\t\t\t\t\tYou have no account yet, please make a request to create an account\r\n\t\t\t\t\t\tfor you and wait for the approval of your request\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t(Click on \"Account Requests\" link above to view or create a request)\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h4>View Account</h4>\r\n\r\n\t\t\t<GPCAccountView data={data} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default View;\r\n","import { FC, useContext, useEffect, useState } from \"react\";\r\nimport PageStateContext, { PageModeType } from \"../../../lib/pageStateContext\";\r\nimport View from \"./view\";\r\nimport { useGlobal } from \"../../../lib/hooks\";\r\nimport Landing from \"../landing-page\";\r\n\r\nconst Account: FC = () => {\r\n\tconst g = useGlobal();\r\n\tconst [pageMode, setPageMode] = useState<PageModeType>(\"view\");\r\n\tconst [openProps, setOpenProps] = useState<object>({});\r\n\r\n\tconst ps = useContext(PageStateContext);\r\n\tps.Add({ key: \"uplineclaim-setPageMode\", dispatch: setPageMode });\r\n\tps.Add({ key: \"uplineclaim-setOpenProps\", dispatch: setOpenProps });\r\n\r\n\tuseEffect(() => {\r\n\t\tsetOpenProps({ ...openProps, data: g.GPCAccount });\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Landing />\r\n\t\t\t{pageMode == \"view\" && <View {...openProps} />}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Account;\r\n"],"sourceRoot":""}