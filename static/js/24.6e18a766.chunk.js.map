{"version":3,"sources":["components/styled.tsx","../node_modules/@material-ui/icons/Close.js","components/daterange-select/index.tsx","pages/management/reports/landing-page/index.tsx","components/data-select/account-table-select.tsx","pages/management/reports/payout/report.tsx","pages/management/reports/payout/index.tsx"],"names":["StyledBadge","withStyles","theme","createStyles","badge","right","top","border","palette","background","paper","padding","backgroundColor","color","Badge","ConfirmedBadge","StyledViewPage","props","classes","makeStyles","root","flexGrow","spacing","text","secondary","minHeight","position","useViewPageStyles","className","children","StyledViewField","height","maxWidth","fontSize","borderBottom","InlineList","align","wrap","textAlign","whiteSpace","margin","paddingInlineStart","listStyle","display","verticalAlign","useStyles","InlineListItem","width","useClickableStyle","cursor","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","DateRangeElement","onChange","period","useState","open","setOpen","toggle","initialDateRange","closeOnClickOutside","range","Period","startDate","endDate","DateRangeSelectDialog","title","onSelectionConfirmed","nc","useContext","NotificationContext","newPeriod","setNewPeriod","handleClose","onClose","disableBackdropClick","disableEscapeKeyDown","style","onClick","variant","errors","ret","IsValid","push","validate","length","snackbar","show","DateRangeSelectWidget","clickable","p","setP","disp","setDisp","useEffect","s","FPeriod","updateDisp","disabled","label","LandingMenu","go","useNavigation","Landing","appBar","marginLeft","flex","Transition","forwardRef","ref","Slide","direction","AccountTableSelect","date","req","useRequest","data","setData","getList","a","get","process","res","success","selectionModel","setSelectionModel","rows","columns","field","headerName","valueGetter","params","row","profile","name","account","upline","hideFooterPagination","autoHeight","checkboxSelection","onSelectionModelChange","newSelection","selectedStocks","filter","x","find","y","id","AccountTableSelectDialog","selection","setSelection","handleApply","msgbox","Dialog","fullScreen","TransitionComponent","AppBar","Toolbar","IconButton","edge","Typography","Button","marginTop","paddingBottom","Report","undefined","setPeriod","accountNos","setAccountNos","Date","refresh","setRefresh","psc","setPSC","gsc","setGSC","lsc","setLSC","total","setTotal","getData","post","_psc","_gsc","_lsc","_total","forEach","totalCommissions","getTotals","accountNo","rank","description","headerAlign","valueFormatter","FDouble","FormControl","FormLabel","e","FDateTime","hideFooter","map","InventoryReport","pageMode","setPageMode","setOpenProps","ps","PageStateContext","Add","key","dispatch"],"mappings":"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","file":"static/js/24.6e18a766.chunk.js","sourcesContent":["import {\r\n\tBadge,\r\n\tcreateStyles,\r\n\tmakeStyles,\r\n\tPaper,\r\n\tTheme,\r\n\twithStyles,\r\n} from \"@material-ui/core\";\r\nimport { Label } from \"@material-ui/icons\";\r\nimport { FC } from \"react\";\r\nimport { classicNameResolver } from \"typescript\";\r\n\r\nexport const StyledBadge = withStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tbadge: {\r\n\t\t\tright: -3,\r\n\t\t\ttop: 13,\r\n\t\t\tborder: `2px solid ${theme.palette.background.paper}`,\r\n\t\t\tpadding: \"0 4px\",\r\n\t\t\tbackgroundColor: \"gray\",\r\n\t\t\tcolor: \"white\",\r\n\t\t},\r\n\t})\r\n)(Badge);\r\n\r\nexport const ConfirmedBadge = withStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tbadge: {\r\n\t\t\tright: -3,\r\n\t\t\ttop: 13,\r\n\t\t\tborder: `2px solid ${theme.palette.background.paper}`,\r\n\t\t\tpadding: \"0 4px\",\r\n\t\t\tbackgroundColor: \"green\",\r\n\t\t\tcolor: \"white\",\r\n\t\t},\r\n\t})\r\n)(Badge);\r\n\r\nexport const StyledViewPage: FC = (props) => {\r\n\tconst useViewPageStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\tflexGrow: 1,\r\n\t\t\t},\r\n\t\t\tpaper: {\r\n\t\t\t\tpadding: theme.spacing(2),\r\n\t\t\t\tcolor: theme.palette.text.secondary,\r\n\t\t\t\tminHeight: 400,\r\n\t\t\t\tposition: \"relative\",\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\tconst classes = useViewPageStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Paper className={classes.paper}>{props.children}</Paper>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\ninterface IStyledViewFieldProps {\r\n\theight?: number;\r\n\tmaxWidth?: number;\r\n}\r\n\r\nexport const StyledViewField: FC<IStyledViewFieldProps> = ({\r\n\theight,\r\n\tmaxWidth,\r\n\tchildren,\r\n}) => {\r\n\tconst useViewPageStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\tfontSize: 16,\r\n\t\t\t\tpadding: \"0 2px\",\r\n\t\t\t\tborderBottom: \"2px dotted #e0e0e0\",\r\n\t\t\t\theight: height ?? \"initial\",\r\n\t\t\t\tmaxWidth: maxWidth ?? 300,\r\n\t\t\t\tminHeight: 20,\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\tconst classes = useViewPageStyles();\r\n\r\n\treturn <div className={classes.root}>{children}</div>;\r\n};\r\n\r\ninterface IInlineListProps {\r\n\talign?: \"left\" | \"center\" | \"right\";\r\n\twrap?: boolean;\r\n\tclassName?: string;\r\n}\r\n\r\nexport const InlineList: FC<IInlineListProps> = ({\r\n\talign,\r\n\twrap,\r\n\tclassName,\r\n\tchildren,\r\n}) => {\r\n\tconst useStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\ttextAlign: align,\r\n\t\t\t\twhiteSpace: wrap ? \"initial\" : \"nowrap\",\r\n\t\t\t\t\"& > ul\": {\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tpaddingInlineStart: 0,\r\n\t\t\t\t},\r\n\t\t\t\t\"& ul ul\": {\r\n\t\t\t\t\tpadding: \"20px\",\r\n\t\t\t\t},\r\n\t\t\t\t\"& li\": {\r\n\t\t\t\t\tlistStyle: \"none\",\r\n\t\t\t\t\tdisplay: \"inline-block\",\r\n\t\t\t\t\tverticalAlign: \"top\",\r\n\t\t\t\t\tmargin:\r\n\t\t\t\t\t\talign == \"left\"\r\n\t\t\t\t\t\t\t? \"0 10px 0 0\"\r\n\t\t\t\t\t\t\t: align == \"center\"\r\n\t\t\t\t\t\t\t? \"0 5px 0 5px\"\r\n\t\t\t\t\t\t\t: \"0 0 0 10px\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={`${classes.root} ${className ?? \"\"}`}>\r\n\t\t\t<ul>{children}</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\ninterface IInlineListItemProps {\r\n\talign?: \"left\" | \"center\" | \"right\";\r\n\twidth?: number;\r\n}\r\nexport const InlineListItem: FC<IInlineListItemProps> = ({\r\n\talign,\r\n\twidth,\r\n\tchildren,\r\n}) => {\r\n\tconst useStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\ttextAlign: align ?? \"left\",\r\n\t\t\t\twidth: width ? `${width}px` : \"initial\",\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\tconst classes = useStyles();\r\n\r\n\treturn <li className={classes.root}>{children}</li>;\r\n};\r\n\r\nexport const useClickableStyle = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\troot: {\r\n\t\t\t\"&, & *\": {\r\n\t\t\t\tcursor: \"pointer !important\",\r\n\t\t\t\tcolor: \"black !important\",\r\n\t\t\t},\r\n\t\t\t\"&:hover *\": {\r\n\t\t\t\tcolor: \"blue !important\",\r\n\t\t\t},\r\n\t\t},\r\n\t})\r\n);\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;","import { FC, useContext, useEffect, useState } from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { FPeriod, Period } from \"../../lib/common\";\r\nimport {\r\n\tButton,\r\n\tDialog,\r\n\tDialogActions,\r\n\tDialogContent,\r\n\tDialogTitle,\r\n\tTextField,\r\n} from \"@material-ui/core\";\r\nimport { StyledViewField, useClickableStyle } from \"../styled\";\r\nimport { NotificationContext } from \"../../lib/notifications\";\r\nimport { DateRange, DateRangePicker } from \"materialui-daterange-picker\";\r\n\r\ninterface IDateRangeProps {\r\n\tonChange: (value: Period) => void;\r\n\tperiod: Period;\r\n}\r\n\r\nconst DateRangeElement: FC<IDateRangeProps> = ({ onChange, period }) => {\r\n\tconst [open, setOpen] = useState(true);\r\n\tconst toggle = () => setOpen(!open);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<DateRangePicker\r\n\t\t\t\topen={open}\r\n\t\t\t\ttoggle={toggle}\r\n\t\t\t\tinitialDateRange={period}\r\n\t\t\t\tcloseOnClickOutside={false}\r\n\t\t\t\tonChange={(range) => {\r\n\t\t\t\t\tonChange(new Period(range.startDate, range.endDate));\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\ninterface IDateRangeSelectDialogProps extends IDateRangeWidgetWidgetProps {\r\n\topen: boolean;\r\n\tsetOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport const DateRangeSelectDialog: FC<IDateRangeSelectDialogProps> = ({\r\n\ttitle,\r\n\tperiod,\r\n\tonSelectionConfirmed,\r\n\topen,\r\n\tsetOpen,\r\n}) => {\r\n\tconst nc = useContext(NotificationContext);\r\n\r\n\tconst [newPeriod, setNewPeriod] = useState<Period | null>(null);\r\n\tconst handleClose = () => setOpen(false);\r\n\r\n\tconst validate = () => {\r\n\t\tlet ret: string[] = [];\r\n\r\n\t\tif (!newPeriod?.IsValid) ret.push(\"Invalid period\");\r\n\r\n\t\treturn ret;\r\n\t};\r\n\r\n\tconst handleApply = () => {\r\n\t\tconst errors = validate();\r\n\t\tif (errors.length > 0) {\r\n\t\t\tnc.snackbar.show(errors, \"warning\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tnewPeriod && onSelectionConfirmed(newPeriod);\r\n\t\tsetOpen(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Dialog\r\n\t\t\t\tonClose={handleClose}\r\n\t\t\t\topen={open}\r\n\t\t\t\tdisableBackdropClick\r\n\t\t\t\tdisableEscapeKeyDown\r\n\t\t\t\tmaxWidth=\"lg\"\r\n\t\t\t>\r\n\t\t\t\t<DialogTitle>{`${title}`}</DialogTitle>\r\n\t\t\t\t<DialogContent>\r\n\t\t\t\t\t<div style={{ width: \"720px\" }}>\r\n\t\t\t\t\t\t<DateRangeElement\r\n\t\t\t\t\t\t\tperiod={period}\r\n\t\t\t\t\t\t\tonChange={(value) => setNewPeriod(value)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</DialogContent>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button onClick={handleClose} variant=\"contained\" color=\"default\">\r\n\t\t\t\t\t\tCancel\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button onClick={handleApply} variant=\"contained\" color=\"primary\">\r\n\t\t\t\t\t\tOk\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\ninterface IDateRangeWidgetWidgetProps {\r\n\ttitle: string;\r\n\tperiod: Period;\r\n\tonSelectionConfirmed: (value: Period) => void;\r\n}\r\n\r\nexport const DateRangeSelectWidget: FC<IDateRangeWidgetWidgetProps> = ({\r\n\ttitle,\r\n\tperiod,\r\n\tonSelectionConfirmed,\r\n}) => {\r\n\tconst useStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\troot: {\r\n\t\t\t\tdisplay: \"inline-block\",\r\n\t\t\t\tcursor: \"pointer\",\r\n\t\t\t\tpadding: \"8px\",\r\n\t\t\t\t\"& *\": {\r\n\t\t\t\t\tcursor: \"pointer !important\",\r\n\t\t\t\t\tcolor: \"black !important\",\r\n\t\t\t\t},\r\n\t\t\t\t\"&:hover\": {\r\n\t\t\t\t\tcolor: \"gray\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\r\n\tconst classes = useStyles();\r\n\tconst clickable = useClickableStyle();\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [p, setP] = useState<Period>(period);\r\n\tconst [disp, setDisp] = useState(\"\");\r\n\r\n\tconst handleClick = () => {\r\n\t\tsetOpen(true);\r\n\t};\r\n\r\n\tconst updateDisp = (value: Period) => {\r\n\t\tconst s = FPeriod(value.startDate, value.endDate);\r\n\t\tsetDisp(s);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateDisp(p);\r\n\t}, [p]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div onClick={handleClick}>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tclassName={`${classes.root} ${clickable.root}`}\r\n\t\t\t\t\tdisabled\r\n\t\t\t\t\tlabel={title}\r\n\t\t\t\t\tvalue={disp}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<DateRangeSelectDialog\r\n\t\t\t\ttitle={title}\r\n\t\t\t\tperiod={p}\r\n\t\t\t\tonSelectionConfirmed={(value) => {\r\n\t\t\t\t\tsetP(value);\r\n\t\t\t\t\tonSelectionConfirmed(value);\r\n\t\t\t\t}}\r\n\t\t\t\topen={open}\r\n\t\t\t\tsetOpen={setOpen}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { Button } from \"@material-ui/core\";\r\nimport { FC } from \"react\";\r\nimport \"../../../../style.scss\";\r\nimport { useNavigation } from \"../../../../lib/hooks\";\r\n\r\nexport const LandingMenu: FC = () => {\r\n\tconst { go } = useNavigation();\r\n\r\n\treturn (\r\n\t\t<div className=\"landing-page-menu\">\r\n\t\t\t<Button onClick={() => go(\"payout-report\")}>Payout</Button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst Landing: FC = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>Reports</h3>\r\n\r\n\t\t\t<p>Please select your task</p>\r\n\t\t\t<LandingMenu />\r\n\t\t\t<hr />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Landing;\r\n","import { FC, forwardRef, useContext, useEffect, useState } from \"react\";\r\nimport { useRequest } from \"../../lib/hooks\";\r\nimport Loading from \"../loading\";\r\nimport {\r\n\tDataGrid,\r\n\tGridColDef,\r\n\tGridPageChangeParams,\r\n\tGridRowId,\r\n\tGridValueGetterParams,\r\n} from \"@material-ui/data-grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport { NotificationContext } from \"../../lib/notifications\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport {\r\n\tAppBar,\r\n\tcreateStyles,\r\n\tIconButton,\r\n\tmakeStyles,\r\n\tTheme,\r\n\tToolbar,\r\n\tTypography,\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { GPCAccount } from \"../../lib/models\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tappBar: {\r\n\t\t\tposition: \"relative\",\r\n\t\t},\r\n\t\ttitle: {\r\n\t\t\tmarginLeft: theme.spacing(2),\r\n\t\t\tflex: 1,\r\n\t\t},\r\n\t})\r\n);\r\n\r\nconst Transition = forwardRef(function Transition(\r\n\tprops: TransitionProps & { children?: React.ReactElement },\r\n\tref: React.Ref<unknown>\r\n) {\r\n\treturn <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ninterface IProps {\r\n\tdate: Date;\r\n\tonChange: (value: GPCAccount[]) => void;\r\n}\r\n\r\nexport const AccountTableSelect: FC<IProps> = ({ date, onChange }) => {\r\n\tconst req = useRequest();\r\n\r\n\tconst [data, setData] = useState<GPCAccount[] | null>(null);\r\n\r\n\tconst getList = async () => {\r\n\t\tconst res = await req.get(`${process.env.REACT_APP_API}/gpcaccount/list`);\r\n\t\tif (res.success) {\r\n\t\t\tsetData(res.data);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tgetList();\r\n\t}, []);\r\n\r\n\tconst columns: GridColDef[] = [\r\n\t\t{ field: \"id\", headerName: \"Id\", width: 90 },\r\n\t\t{\r\n\t\t\tfield: \"name\",\r\n\t\t\theaderName: \"Name\",\r\n\t\t\twidth: 300,\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\t(params.row as GPCAccount).profile.name,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"accountNo\",\r\n\t\t\theaderName: \"Account No.\",\r\n\t\t\twidth: 170,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"upline\",\r\n\t\t\theaderName: \"Upline\",\r\n\t\t\twidth: 300,\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) => {\r\n\t\t\t\tconst account = params.row as GPCAccount;\r\n\t\t\t\treturn account.upline ? account.upline.profile.name : \"[No upline]\";\r\n\t\t\t},\r\n\t\t},\r\n\t];\r\n\r\n\tconst [selectionModel, setSelectionModel] = useState<GridRowId[]>([]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{data ? (\r\n\t\t\t\t<DataGrid\r\n\t\t\t\t\trows={data}\r\n\t\t\t\t\tcolumns={columns}\r\n\t\t\t\t\thideFooterPagination={true}\r\n\t\t\t\t\tautoHeight\r\n\t\t\t\t\tcheckboxSelection\r\n\t\t\t\t\tselectionModel={selectionModel}\r\n\t\t\t\t\tonSelectionModelChange={(newSelection) => {\r\n\t\t\t\t\t\tsetSelectionModel(newSelection.selectionModel);\r\n\r\n\t\t\t\t\t\tconst selectedStocks = data.filter((x) =>\r\n\t\t\t\t\t\t\tnewSelection.selectionModel.find((y) => y == x.id)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tonChange(selectedStocks);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\t<Loading />\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\ninterface IAccountTableSelectDialogProps {\r\n\tdate: Date;\r\n\topen: boolean;\r\n\tsetOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n\tonSelectionConfirmed: (value: GPCAccount[]) => void;\r\n}\r\n\r\nexport const AccountTableSelectDialog: FC<IAccountTableSelectDialogProps> = ({\r\n\tdate,\r\n\topen,\r\n\tsetOpen,\r\n\tonSelectionConfirmed,\r\n}) => {\r\n\tconst classes = useStyles();\r\n\tconst nc = useContext(NotificationContext);\r\n\r\n\tconst [selection, setSelection] = useState<GPCAccount[]>([]);\r\n\r\n\tconst handleClose = () => setOpen(false);\r\n\tconst handleApply = async () => {\r\n\t\tif (selection.length == 0) {\r\n\t\t\tawait nc.msgbox.show(\"No item selected\", \"Select Stocks\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tonSelectionConfirmed(selection);\r\n\t\tsetOpen(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Dialog\r\n\t\t\t\topen={open}\r\n\t\t\t\tonClose={handleClose}\r\n\t\t\t\tfullScreen\r\n\t\t\t\tTransitionComponent={Transition}\r\n\t\t\t>\r\n\t\t\t\t<AppBar className={classes.appBar}>\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\tedge=\"start\"\r\n\t\t\t\t\t\t\tcolor=\"inherit\"\r\n\t\t\t\t\t\t\tonClick={handleClose}\r\n\t\t\t\t\t\t\taria-label=\"close\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<Typography variant=\"h6\" className={classes.title}>\r\n\t\t\t\t\t\t\tSelect Accounts\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Button onClick={handleClose} color=\"inherit\">\r\n\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button onClick={handleApply} color=\"inherit\">\r\n\t\t\t\t\t\t\tApply\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t\t<AccountTableSelect\r\n\t\t\t\t\tdate={date}\r\n\t\t\t\t\tonChange={(value) => setSelection(value)}\r\n\t\t\t\t/>\r\n\t\t\t</Dialog>\r\n\t\t</>\r\n\t);\r\n};\r\n","import {\r\n\tcreateStyles,\r\n\tDivider,\r\n\tFormControl,\r\n\tFormControlLabel,\r\n\tFormLabel,\r\n\tmakeStyles,\r\n\tTextField,\r\n\tTheme,\r\n} from \"@material-ui/core\";\r\nimport {\r\n\tDataGrid,\r\n\tGridColDef,\r\n\tGridPageChangeParams,\r\n\tGridValueFormatterParams,\r\n\tGridValueGetterParams,\r\n} from \"@material-ui/data-grid\";\r\nimport { FC, useContext, useEffect, useState } from \"react\";\r\nimport {\r\n\tAccountTableSelect,\r\n\tAccountTableSelectDialog,\r\n} from \"../../../../components/data-select/account-table-select\";\r\nimport { DateRangeSelectWidget } from \"../../../../components/daterange-select\";\r\nimport Loading from \"../../../../components/loading\";\r\nimport {\r\n\tInlineList,\r\n\tInlineListItem,\r\n\tuseClickableStyle,\r\n} from \"../../../../components/styled\";\r\nimport {\r\n\tFDateCustom,\r\n\tFDateTime,\r\n\tFDouble,\r\n\tPeriod,\r\n} from \"../../../../lib/common\";\r\nimport { useRequest } from \"../../../../lib/hooks\";\r\nimport { GPCAccount } from \"../../../../lib/models\";\r\nimport { AccountModel } from \"../../../../lib/models-account\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\troot: {\r\n\t\t\tmarginTop: 16,\r\n\t\t\tpaddingBottom: 6,\r\n\t\t\tborderBottom: \"1px dotted gray\",\r\n\t\t},\r\n\t})\r\n);\r\n\r\ninterface IProps {}\r\n\r\nconst Report: FC<IProps> = () => {\r\n\tconst req = useRequest();\r\n\tconst classes = useStyles();\r\n\tconst clickable = useClickableStyle();\r\n\r\n\tconst [period, setPeriod] = useState<Period>(\r\n\t\tnew Period(undefined, undefined, \"month\")\r\n\t);\r\n\r\n\tconst [data, setData] = useState<AccountModel[] | null>(null);\r\n\tconst [accountNos, setAccountNos] = useState<string[]>([]);\r\n\tconst [refresh, setRefresh] = useState(new Date());\r\n\tconst [open, setOpen] = useState(false);\r\n\r\n\tconst [psc, setPSC] = useState(0);\r\n\tconst [gsc, setGSC] = useState(0);\r\n\tconst [lsc, setLSC] = useState(0);\r\n\tconst [total, setTotal] = useState(0);\r\n\r\n\tconst getTotals = () => {\r\n\t\tlet _psc = 0;\r\n\t\tlet _gsc = 0;\r\n\t\tlet _lsc = 0;\r\n\t\tlet _total = 0;\r\n\r\n\t\tdata?.forEach((x) => {\r\n\t\t\t_psc += x.psc;\r\n\t\t\t_gsc += x.gsc;\r\n\t\t\t_lsc += x.lsc;\r\n\t\t\t_total += x.totalCommissions;\r\n\t\t});\r\n\r\n\t\tsetPSC(_psc);\r\n\t\tsetGSC(_gsc);\r\n\t\tsetLSC(_lsc);\r\n\t\tsetTotal(_total);\r\n\t};\r\n\r\n\tconst getData = async (accountNos: string[]) => {\r\n\t\tsetRefresh(new Date());\r\n\r\n\t\tconst res = await req.post(`${process.env.REACT_APP_API}/report/payouts`, {\r\n\t\t\taccountNos: accountNos,\r\n\t\t\tstartDate: period.startDate,\r\n\t\t\tendDate: period.endDate,\r\n\t\t});\r\n\r\n\t\tif (res.success) {\r\n\t\t\tsetData(res.data);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tgetTotals();\r\n\t}, [data]);\r\n\r\n\tconst columns: GridColDef[] = [\r\n\t\t{ field: \"id\", headerName: \"Id\", width: 90 },\r\n\t\t{\r\n\t\t\tfield: \"name\",\r\n\t\t\theaderName: \"Name\",\r\n\t\t\twidth: 300,\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\t(params.row as AccountModel).account.profile.name,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"accountNo\",\r\n\t\t\theaderName: \"Account No.\",\r\n\t\t\twidth: 170,\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\t(params.row as AccountModel).account.accountNo,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"rank\",\r\n\t\t\theaderName: \"Rank\",\r\n\t\t\twidth: 170,\r\n\t\t\tvalueGetter: (params: GridValueGetterParams) =>\r\n\t\t\t\t(params.row as AccountModel).rank.description,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"psc\",\r\n\t\t\theaderName: \"PSC (₱)\",\r\n\t\t\twidth: 150,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\tvalueFormatter: (params: GridValueFormatterParams) =>\r\n\t\t\t\tFDouble((params.row as AccountModel).psc),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"gsc\",\r\n\t\t\theaderName: \"GSC (₱)\",\r\n\t\t\twidth: 150,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\tvalueFormatter: (params: GridValueFormatterParams) =>\r\n\t\t\t\tFDouble((params.row as AccountModel).gsc),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"lsc\",\r\n\t\t\theaderName: \"LSC (₱)\",\r\n\t\t\twidth: 150,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\tvalueFormatter: (params: GridValueFormatterParams) =>\r\n\t\t\t\tFDouble((params.row as AccountModel).lsc),\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"total\",\r\n\t\t\theaderName: \"Total (₱)\",\r\n\t\t\twidth: 150,\r\n\t\t\theaderAlign: \"right\",\r\n\t\t\talign: \"right\",\r\n\t\t\tvalueFormatter: (params: GridValueFormatterParams) =>\r\n\t\t\t\tFDouble((params.row as AccountModel).totalCommissions),\r\n\t\t},\r\n\t];\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<InlineList>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<DateRangeSelectWidget\r\n\t\t\t\t\t\ttitle=\"Select Period\"\r\n\t\t\t\t\t\tperiod={period}\r\n\t\t\t\t\t\tonSelectionConfirmed={(value) => setPeriod(value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t<FormLabel>Select Accounts</FormLabel>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName={`${clickable.root} ${classes.root}`}\r\n\t\t\t\t\t\t\tonClick={(e) => setOpen(true)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{accountNos.length == 0\r\n\t\t\t\t\t\t\t\t? \"[No selection]\"\r\n\t\t\t\t\t\t\t\t: `Selected ${accountNos.length} account(s)`}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</FormControl>\r\n\t\t\t\t</li>\r\n\t\t\t</InlineList>\r\n\t\t\t<br />\r\n\r\n\t\t\t{accountNos.length > 0 && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{data ? (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<h4>Account List</h4>\r\n\t\t\t\t\t\t\t<small>As of {FDateTime(refresh)}</small>\r\n\t\t\t\t\t\t\t<div style={{ height: 400, width: \"100%\" }}>\r\n\t\t\t\t\t\t\t\t<DataGrid\r\n\t\t\t\t\t\t\t\t\trows={data}\r\n\t\t\t\t\t\t\t\t\tcolumns={columns}\r\n\t\t\t\t\t\t\t\t\thideFooterPagination={true}\r\n\t\t\t\t\t\t\t\t\thideFooter={true}\r\n\t\t\t\t\t\t\t\t\tautoHeight\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<InlineList>\r\n\t\t\t\t\t\t\t\t\t<InlineListItem width={712}></InlineListItem>\r\n\t\t\t\t\t\t\t\t\t<InlineListItem width={140} align=\"right\">\r\n\t\t\t\t\t\t\t\t\t\t<b>{FDouble(psc)}</b>\r\n\t\t\t\t\t\t\t\t\t</InlineListItem>\r\n\t\t\t\t\t\t\t\t\t<InlineListItem width={140} align=\"right\">\r\n\t\t\t\t\t\t\t\t\t\t<b>{FDouble(gsc)}</b>\r\n\t\t\t\t\t\t\t\t\t</InlineListItem>\r\n\t\t\t\t\t\t\t\t\t<InlineListItem width={140} align=\"right\">\r\n\t\t\t\t\t\t\t\t\t\t<b>{FDouble(lsc)}</b>\r\n\t\t\t\t\t\t\t\t\t</InlineListItem>\r\n\t\t\t\t\t\t\t\t\t<InlineListItem width={140} align=\"right\">\r\n\t\t\t\t\t\t\t\t\t\t<b>{FDouble(total)}</b>\r\n\t\t\t\t\t\t\t\t\t</InlineListItem>\r\n\t\t\t\t\t\t\t\t</InlineList>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Loading />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t\t<AccountTableSelectDialog\r\n\t\t\t\tdate={refresh}\r\n\t\t\t\topen={open}\r\n\t\t\t\tsetOpen={setOpen}\r\n\t\t\t\tonSelectionConfirmed={(value: GPCAccount[]) => {\r\n\t\t\t\t\tconst selection = value.map((x) => x.accountNo);\r\n\t\t\t\t\tsetAccountNos(selection);\r\n\t\t\t\t\tsetData(null);\r\n\t\t\t\t\tgetData(selection);\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Report;\r\n","import { FC, useContext, useState } from \"react\";\r\nimport { WarehouseSelect } from \"../../../../components/data-select/warehouse-select\";\r\nimport { DateRangeSelectWidget } from \"../../../../components/daterange-select\";\r\nimport { Period } from \"../../../../lib/common\";\r\nimport { Warehouse } from \"../../../../lib/models-inventory\";\r\nimport PageStateContext, {\r\n\tPageModeType,\r\n} from \"../../../../lib/pageStateContext\";\r\nimport Landing from \"../landing-page\";\r\nimport Report from \"./report\";\r\n\r\nconst InventoryReport: FC = () => {\r\n\tconst [pageMode, setPageMode] = useState<PageModeType>(\"index\");\r\n\tconst [openProps, setOpenProps] = useState<object>({});\r\n\r\n\tconst ps = useContext(PageStateContext);\r\n\tps.Add({ key: \"pricelists-setPageMode\", dispatch: setPageMode });\r\n\tps.Add({ key: \"pricelists-setOpenProps\", dispatch: setOpenProps });\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Landing />\r\n\t\t\t<>\r\n\t\t\t\t<h4>Payout</h4>\r\n\t\t\t\t{pageMode == \"index\" && <Report />}\r\n\t\t\t</>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default InventoryReport;\r\n"],"sourceRoot":""}